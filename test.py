from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import tokenbot, Text_serv, Dict_serv, asyncio, keyboards_serv


class Form(StatesGroup):
    lang = State()
    service = State()
    subservice = State()
    subservice_2 = State()

TOKEN = tokenbot.TOKONBOT

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

LANGS = ['üá∑üá∫ –†—É—Å—Å–∫–∏–π üá∑üá∫', 'üá¨üáß English üá¨üáß']
SERVICES = Dict_serv.SRV1
SUBSERVICES = Dict_serv.SRV2
SUBSERVICES_2 = Dict_serv.SRV3
GREETINGS = {
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π üá∑üá∫": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    "üá¨üáß English üá¨üáß": "Welcome!"
}

def generate_keyboard(options, back_button=True, home_button=True):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(text=option, callback_data=option) for option in options]
    if back_button:
        buttons.append(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    if home_button:
        buttons.append(types.InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home"))
    keyboard.add(*buttons)
    return keyboard

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await Form.lang.set()
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:",
                           reply_markup=generate_keyboard(LANGS, back_button=False, home_button=False))

@dp.callback_query_handler(lambda c: c.data in LANGS, state=Form.lang)
async def process_lang_choose(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.service.set()
    chosen_lang = callback_query.data
    await state.update_data(chosen_lang=chosen_lang)
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=GREETINGS[chosen_lang] + " –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                                reply_markup=generate_keyboard(SERVICES[chosen_lang], back_button=False, home_button=True))

@dp.callback_query_handler(lambda c: any(c.data in service_list for service_list in SERVICES.values()), state=Form.service)
async def process_service_choose(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.subservice.set()
    chosen_service = callback_query.data
    await state.update_data(chosen_service=chosen_service)
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"You've chosen: {chosen_service}. Please choose the subservice:",
                                reply_markup=generate_keyboard(SUBSERVICES[chosen_service]))

@dp.callback_query_handler(lambda c: any(c.data in subservice_list for subservice_list in SUBSERVICES.values()), state=Form.subservice)
async def process_subservice_choose(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.subservice_2.set()
    chosen_subservice = callback_query.data
    await state.update_data(chosen_subservice=chosen_subservice)
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"You've chosen: {chosen_subservice}. Please choose the next subservice:",
                                reply_markup=generate_keyboard(SUBSERVICES_2[chosen_subservice]))

# @dp.callback_query_handler(lambda c: any(c.data in subservice_2_list for subservice_2_list in SUBSERVICES_2.values()), state=Form.subservice_2)
# async def process_subservice_2_choose(callback_query: types.CallbackQuery, state: FSMContext):
#     chosen_subservice_2 = callback_query.data
#     await bot.edit_message_text(chat_id=callback_query.from_user.id,
#                                 message_id=callback_query.message.message_id,
#                                 text=f"You've chosen: {chosen_subservice_2}.")

# –∫–æ–Ω–µ—á–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.callback_query_handler(lambda c: c.data == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç", state=Form.subservice_2)
async def inner_passport_handler(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=Text_serv.iner_pasp_txt1,
                                parse_mode='HTML',
                                )
    await asyncio.sleep(2)
    await bot.send_message(chat_id=callback_query.from_user.id,
                                #message_id=callback_query.message.message_id,
                                text=Text_serv.iner_pasp_txt2,
                                parse_mode='HTML',
                                reply_markup=generate_keyboard([], back_button=True, home_button=True))

@dp.callback_query_handler(lambda c: c.data == "–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç", state=Form.subservice_2)
async def inner_inpassport_handler(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=Text_serv.forein_pasp_txt1,
                                parse_mode='HTML')

    await asyncio.sleep(2)
    await bot.send_message(chat_id=callback_query.from_user.id,
                                #message_id=callback_query.message.message_id,
                                text=Text_serv.forein_pasp_txt2,
                                parse_mode='HTML')

    await asyncio.sleep(2)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           # message_id=callback_query.message.message_id,
                           text=Text_serv.forein_pasp_txt3,
                           parse_mode='HTML')

    await asyncio.sleep(2)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           # message_id=callback_query.message.message_id,
                           text=Text_serv.forein_pasp_txt4,
                           parse_mode='HTML')

    await asyncio.sleep(2)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           # message_id=callback_query.message.message_id,
                           text=Text_serv.forein_pasp_txt5,
                           parse_mode='HTML',
                           reply_markup=generate_keyboard([], back_button=True, home_button=True))
@dp.callback_query_handler(lambda c: c.data == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", state=Form.subservice_2)
async def living_place_handler(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text='–Ø —É–∑–Ω–∞–ª, —á—Ç–æ –≤ –º–æ–µ–º –∂–∏–ª–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–Ω–µ —á–µ–ª–æ–≤–µ–∫. –ß—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å?',
                                parse_mode='HTML', reply_markup=keyboards_serv.living_key1
                                )

    await bot.send_message(chat_id=callback_query.from_user.id,
                                #message_id=callback_query.message.message_id,
                                text='–Ø —Ö–æ—á—É —Å–Ω—è—Ç—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –∂–∏–ª—å—Ü–æ–≤. –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
                                parse_mode='HTML', reply_markup=keyboards_serv.living_key2
                           )
    await bot.send_message(chat_id=callback_query.from_user.id,
                                #message_id=callback_query.message.message_id,
                                text='–ü–µ—Ä–µ–µ–∑–¥ –≤ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω',
                                parse_mode='HTML', reply_markup=keyboards_serv.living_key3
                           )


@dp.message_handler(commands=['start'], state="*")
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    await Form.lang.set()
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=generate_keyboard(LANGS, home_button=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, —É—Å–ª—É–≥–∏, –ø–æ–¥—É—Å–ª—É–≥–∏ –∏ —Ç. –¥.

@dp.callback_query_handler(lambda c: c.data == "back", state="*")
async def back_button_pressed(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state is None:
        return

    if current_state == Form.subservice_2.state:
        await Form.subservice.set()
        # –ö–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—É—Å–ª—É–≥–∏
        chosen_subservice = data.get('chosen_subservice')
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_subservice}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à—É—é –ø–æ–¥—É—Å–ª—É–≥—É:",
                                    reply_markup=generate_keyboard(SUBSERVICES[chosen_subservice], back_button=True, home_button=True))

    elif current_state == Form.subservice.state:
        await Form.service.set()
        # –ö–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
        chosen_lang = data.get('chosen_lang')
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text=GREETINGS[chosen_lang] + " –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                                    reply_markup=generate_keyboard(SERVICES[chosen_lang], back_button=True, home_button=True))

    elif current_state == Form.service.state:
        await Form.lang.set()
        # –ö–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:",
                                    reply_markup=generate_keyboard(LANGS, home_button=True))

@dp.callback_query_handler(lambda c: c.data == "home", state="*")
async def home_button_pressed(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await Form.lang.set()
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:",
                                reply_markup=generate_keyboard(LANGS, home_button=True))

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
